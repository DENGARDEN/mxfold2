import torch
import numpy as np
import dnnfold.default_param

class Param:
    def __init__(self, default=None):
        if default is not None:
            self.score_stack = torch.tensor(default.score_stack)
            self.score_hairpin = torch.tensor(default.score_hairpin)
            self.score_bulge = torch.tensor(default.score_bulge)
            self.score_internal = torch.tensor(default.score_internal)
            self.score_mismatch_external = torch.tensor(default.score_mismatch_external)
            self.score_mismatch_hairpin = torch.tensor(default.score_mismatch_hairpin)
            self.score_mismatch_internal = torch.tensor(default.score_mismatch_internal)
            self.score_mismatch_internal_1n = torch.tensor(default.score_mismatch_internal_1n)
            self.score_mismatch_internal_23 = torch.tensor(default.score_mismatch_internal_23)
            self.score_mismatch_multi = torch.tensor(default.score_mismatch_multi)
            self.score_int11 = torch.tensor(default.score_int11)
            self.score_int21 = torch.tensor(default.score_int21)
            self.score_int22 = torch.tensor(default.score_int22)
            self.score_dangle5 = torch.tensor(default.score_dangle5)
            self.score_dangle3 = torch.tensor(default.score_dangle3)
            self.score_ml_base = torch.tensor(default.score_ml_base)
            self.score_ml_closing = torch.tensor(default.score_ml_closing)
            self.score_ml_intern = torch.tensor(default.score_ml_intern)
            self.score_ninio = torch.tensor(default.score_ninio)
            self.score_max_ninio = torch.tensor(default.score_max_ninio)
            self.score_duplex_init = torch.tensor(default.score_duplex_init)
            self.score_terminalAU = torch.tensor(default.score_terminalAU)
            self.score_lxc = torch.tensor(default.score_lxc)
        else:
            self.score_stack = torch.zeros((8, 8), dtype=torch.float32)
            self.score_hairpin = torch.zeros((31,), dtype=torch.float32)
            self.score_bulge = torch.zeros((31,), dtype=torch.float32)
            self.score_internal = torch.zeros((31,), dtype=torch.float32)
            self.score_mismatch_external = torch.zeros((8, 5, 5), dtype=torch.float32)
            self.score_mismatch_hairpin = torch.zeros((8, 5, 5), dtype=torch.float32)
            self.score_mismatch_internal = torch.zeros((8, 5, 5), dtype=torch.float32)
            self.score_mismatch_internal_1n = torch.zeros((8, 5, 5), dtype=torch.float32)
            self.score_mismatch_internal_23 = torch.zeros((8, 5, 5), dtype=torch.float32)
            self.score_mismatch_multi = torch.zeros((8, 5, 5), dtype=torch.float32)
            self.score_int11 = torch.zeros((8, 8, 5, 5), dtype=torch.float32)
            self.score_int21 = torch.zeros((8, 8, 5, 5, 5), dtype=torch.float32)
            self.score_int22 = torch.zeros((7, 7, 5, 5, 5, 5), dtype=torch.float32)
            self.score_dangle5 = torch.zeros((8, 5), dtype=torch.float32)
            self.score_dangle3 = torch.zeros((8, 5), dtype=torch.float32)
            self.score_ml_base = torch.zeros((1,), dtype=torch.float32)
            self.score_ml_closing = torch.zeros((1,), dtype=torch.float32)
            self.score_ml_intern = torch.zeros((1,), dtype=torch.float32)
            self.score_ninio = torch.zeros((1,), dtype=torch.float32)
            self.score_max_ninio = torch.zeros((1,), dtype=torch.float32)
            self.score_duplex_init = torch.zeros((1,), dtype=torch.float32)
            self.score_terminalAU = torch.zeros((1,), dtype=torch.float32)
            self.score_lxc = torch.zeros((1,), dtype=torch.float32)
            
        self.clear_count()

    def clear_count(self):
        self.count_stack = torch.zeros((8, 8), dtype=torch.float32)
        self.count_hairpin = torch.zeros((31,), dtype=torch.float32)
        self.count_bulge = torch.zeros((31,), dtype=torch.float32)
        self.count_internal = torch.zeros((31,), dtype=torch.float32)
        self.count_mismatch_external = torch.zeros((8, 5, 5), dtype=torch.float32)
        self.count_mismatch_hairpin = torch.zeros((8, 5, 5), dtype=torch.float32)
        self.count_mismatch_internal = torch.zeros((8, 5, 5), dtype=torch.float32)
        self.count_mismatch_internal_1n = torch.zeros((8, 5, 5), dtype=torch.float32)
        self.count_mismatch_internal_23 = torch.zeros((8, 5, 5), dtype=torch.float32)
        self.count_mismatch_multi = torch.zeros((8, 5, 5), dtype=torch.float32)
        self.count_int11 = torch.zeros((8, 8, 5, 5), dtype=torch.float32)
        self.count_int21 = torch.zeros((8, 8, 5, 5, 5), dtype=torch.float32)
        self.count_int22 = torch.zeros((7, 7, 5, 5, 5, 5), dtype=torch.float32)
        self.count_dangle5 = torch.zeros((8, 5), dtype=torch.float32)
        self.count_dangle3 = torch.zeros((8, 5), dtype=torch.float32)
        self.count_ml_base = torch.zeros((1,), dtype=torch.float32)
        self.count_ml_closing = torch.zeros((1,), dtype=torch.float32)
        self.count_ml_intern = torch.zeros((1,), dtype=torch.float32)
        self.count_ninio = torch.zeros((1,), dtype=torch.float32)
        self.count_max_ninio = torch.zeros((1,), dtype=torch.float32)
        self.count_duplex_init = torch.zeros((1,), dtype=torch.float32)
        self.count_terminalAU = torch.zeros((1,), dtype=torch.float32)
        self.count_lxc = torch.zeros((1,), dtype=torch.float32)

